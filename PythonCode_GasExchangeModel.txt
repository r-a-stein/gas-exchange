#import numpy as np
#import numpy.matlib
#import pandas as pd
#import scipy.io as sio
#import scipy as sp
#import matplotlib.pyplot as plt
#import xarray as xr

#set directory

# Import the data
#input_data = pd.read_csv(dir+'Franks_model_input.csv')
#Franks_model_input file is attached

# STEP 1: set constants for the model
resampleN = 10000 # number of Monte Carlo simulations
low_percentile = 2.5
low_percentile_label = str(low_percentile) + "_percentile"
high_percentile = 97.5
high_percentile_label = str(high_percentile) + "_percentile"

sampleN = len(input_data["Dab"])  # determine number of samples ( = rows)

# Constant parameters in the model (Franks et al., 2014)
d_v = 0.000940096
gamma = 40
a = 4.4 #carbon isotope fractionation driven by diffusion (kinetic)
b = 30 #carbon isotope discrimination by Rubisco.  (equilibrium)

# scalar assumptions we might want to change
# d13C of the atmosphere at 48 Ma. From Tipple et al. 2010. Royer used -6 and 0.7
dCatm = -5.5; # lower value here b/c original (~approximately the isotopic value of the mantle, Pre-Industrialish values)
dCatm_err = 0.7;
# present day co2. not sure what this is supposed to be - PI or present day?
CO2_0 = 396;
# A0: photosynthetic rate at present-day co2 levels, from a living relative
a0m = 6.67; #(living relative like Metasequoia)
eA0 = 0.39;
# gb: boundary layer conductance at present-day co2
gbm = 2;
egb = 0.1;
# ci/ca0: present day ci/ca ratio from a living relative
cicam = 0.63;
eCiCa0 = 0.007;
# s1: scaling from guard cell length to pore length (GCL to PL). Generic scaling for closest living relatives in the Franks et al., 2014 supplement (alpha in Table S2)
s1m = 0.84;
es1 = 0.0165;
# s2: Scaling from single guard cell width (GCW) to stomatal depth (l). Where guard cells are circular (typical) this is 1
s2m = 1;
es2 = 0.05;
# s3: Scaling from area of a circle with diameter of pore length to a_max (maximum area in stomatal pore). Generic scalings are in Table S2, beta.
s3m = 0.5;
es3 = 0.025;
# s4: scaling from max conductance (gcmax) to operational conductance to CO2 (Gcop), measured to fossil's nearest living relative, or generic scaling of 0.2.
s4m = 0.34;
es4 = 0.038;
# s5: scaling from photosynthetic rate (A) to mesophyll conducatance to CO2 (gm). Franks et al., (2014) suggests a generic scaling of 0.013
s5m = 0.013;
es5 = 0.00065;
# fixed A
fixed_A = False;


# STEP 2: random normal monte carlo sampling for each input parameter

# If loops!!

#10,000 random samples to determine uncertainty
# Dab: stomatal density on the abaxial (bottom of leaf) surface
Dab = np.random.normal(np.transpose(np.atleast_2d(input_data.Dab)),
                       np.transpose(np.atleast_2d(input_data.eDab)),size = (sampleN,resampleN))
# Dad: stomatal density on the adaxial (top of leaf) surface (OFTEN none)
if any(input_data.Dad > 0):
              Dad = np.random.normal(np.transpose(np.atleast_2d(input_data.Dab)),
              np.transpose(np.atleast_2d(input_data.eDab)),size = (sampleN,resampleN))
# GCLab: guard cell length (m) on abaxial (bottom of leaf) surface
GCLab = np.random.normal(np.transpose(np.atleast_2d(input_data.GCLab)),
                       np.transpose(np.atleast_2d(input_data.eGCLab)),size = (sampleN,resampleN))
# GCLad: guard cell length (m) on adaxial (top of leaf) surface (often NONE)
if any(input_data.GCLad > 0):
              GCLad = np.random.normal(np.transpose(np.atleast_2d(input_data.GCLad)),
              np.transpose(np.atleast_2d(input_data.eGCLad)),size = (sampleN,resampleN))
# GCWab: single guard cell width on abaxial surface
GCWab = np.random.normal(np.transpose(np.atleast_2d(input_data.GCWab)),
                       np.transpose(np.atleast_2d(input_data.eGCWab)),size = (sampleN,resampleN))
# GCWad: single guard cell width on adaxial surface (often NONE)
if any(input_data.GCWad > 0):
              GCWad = np.random.normal(np.transpose(np.atleast_2d(input_data.GCWad)),
              np.transpose(np.atleast_2d(input_data.eGCWad)),size = (sampleN,resampleN))
# d13Cp: d13C value of plant material
d13Cp = np.random.normal(np.transpose(np.atleast_2d(input_data.d13Cp)),
                       np.transpose(np.atleast_2d(input_data.ed13Cp)),size = (sampleN,resampleN))
# d13Ca: d13C value of the atmosphere. set in above block
d13Ca = np.random.normal(dCatm,dCatm_err,size = (sampleN,resampleN))

# A0: photosynthetic rate at present-day co2 levels, from a living relative
A0 = np.random.normal(a0m,eA0,size = (sampleN,resampleN))

# gb: boundary layer conductance at present-day co2
gb = np.random.normal(gbm,egb,size = (sampleN,resampleN))

# ci/ca0: present day ci/ca from living relative
CiCa0 = np.random.normal(cicam,eCiCa0,size = (sampleN,resampleN))

# s1-s5: scalings in model
s1 = np.random.normal(s1m,es1,size = (sampleN,resampleN))
s2 = np.random.normal(s2m,es2,size = (sampleN,resampleN))
s3 = np.random.normal(s3m,es3,size = (sampleN,resampleN))
s4 = np.random.normal(s4m,es4,size = (sampleN,resampleN))
s5 = np.random.normal(s5m,es5,size = (sampleN,resampleN))



# STEP 3
# Calculation of gctot from stomatal information
# measured parameters from leaf surfaces of fossils (stomatal density, guard cell length, guard cell width)
gcop_abaxial = (d_v * Dab * (np.pi * (GCLab * s1 / 2) ** 2) * s3) / (
                GCWab * s2 + ((np.pi / 2) * np.sqrt(
            (np.pi * (GCLab * s1 / 2) ** 2) * s3 / np.pi))) / 1.6 * s4
if any(input_data.Dad > 0): #it does not
        gcop_adaxial = (d_v * Dad * (np.pi * (GCLad * s1 / 2) ** 2) * s3) / (
                    GCWad * s2 + ((np.pi / 2) * np.sqrt(
                (np.pi * (GCLad * s1 / 2) ** 2) * s3 / np.pi))) / 1.6 * s4
        gcop_gb = ((1 / gcop_abaxial) + (1 / gb)) ** -1 + ((1 / gcop_adaxial) + (1 / gb)) ** -1
else:
        gcop_gb = ((1 / gcop_abaxial) + (1 / gb)) ** -1
# Calculation of c_i/c_a ratio from d13C
ci_ca = (((d13Ca - d13Cp) / (1 + d13Cp / 1000)) - a) / (b - a) #using Farquhar et al., 1989 equation relating ci/ca to total isotopic discrimination by Rubisco + diffusion


# STEP 4: Set up for the iterative loop

# Initial CO2 using A0
ca0 = A0 / (((1 / gcop_gb) + (1 / (s5 * A0))) ** -1 * (1 - ci_ca))

# Initial A1 using ca0:
if fixed_A:
  A1 = A0
else:
  #old v1 version of code:
  #A1 = A0*(((ca0-gamma)*(CO2_0+2*gamma))/((ca0+2*gamma)*(CO2_0-gamma)))
  #new v2 version of code:
  A1 = A0*(((ci_ca*ca0-gamma)*(CiCa0*CO2_0+2*gamma))/
      ((ci_ca*ca0+2*gamma)*(CiCa0*CO2_0-gamma)))

# Initial ca1 CO2, set unrealistic on purpose (10000 ppm)
ca1 = np.full((sampleN,resampleN), 10000.0)

# set third iteration to first
ca2 = ca0

# initialize converge and gctot matrices:
converge = np.zeros((sampleN,resampleN))
gctot = np.zeros((sampleN,resampleN))


# STEP 4: Run Monte Carlo sim of the iterative calculations
for j in range(sampleN):
  for i in range(resampleN):
    iteration_count = 0
    while abs(ca2[j,i] - ca1[j,i]) > 0.001 and iteration_count <= 100:
        ca1[j,i] = ca2[j,i]
        if fixed_A:
            A1[j,i] = A0[j,i]
        else:
            A1[j,i] = A0[j,i]*(((ci_ca[j,i]*ca1[j,i]-gamma)*(CiCa0[j,i]*CO2_0+2*gamma))/
                      ((ci_ca[j,i]*ca1[j,i]+2*gamma)*(CiCa0[j,i]*CO2_0-gamma)))
        ca2[j,i] = A1[j,i] / (((1 / gcop_gb[j,i]) + (1 / (s5[j,i] * A1[j,i]))) ** -1 * (1 - ci_ca[j,i]))
        iteration_count += 1
    if iteration_count < 100:
        converge[j,i] = 1

    gctot[j,i] = ((1 / gcop_gb[j,i]) + (1 / (s5[j,i] * A1[j,i]))) ** -1


# STEP 5: Organize summary stats into a dataframe
CO2_summary = pd.DataFrame(index=range(sampleN),
                           columns=["%converged", "ci_ca", "A", "gctot", "CO2", low_percentile_label,
                                    high_percentile_label])

CO2_summary["%converged"] = np.sum(converge,axis=1) / resampleN * 100
CO2_summary["ci_ca"] = np.median(ci_ca,axis=1)
CO2_summary["A"] = np.median(A1,axis=1)
CO2_summary["gctot"] = np.median(gctot,axis=1)
CO2_summary["CO2"] = np.median(ca2,axis=1)
CO2_summary[low_percentile_label] = np.percentile(ca2, low_percentile, interpolation='linear',axis=1)
CO2_summary[high_percentile_label] = np.percentile(ca2, high_percentile, interpolation='linear',axis=1)


#print(CO2_summary)